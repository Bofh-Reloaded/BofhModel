cmake_minimum_required(VERSION 3.17)

project(finder LANGUAGES C CXX)

if(MSYS OR MINGW)
    # cut out toolchain dlls
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static -static-libgcc -static-libstdc++")
endif()

set(CMAKE_CXX_STANDARD 20)

# Find libboost
if(BOOST_ROOT)
    set(Boost_NO_SYSTEM_PATHS ON)
endif()
find_package(Boost COMPONENTS python REQUIRED)
message("Using boost headers at ${Boost_INCLUDE_DIRS}")
include_directories(${Boost_INCLUDE_DIRS})


# find CPython interpreter and libs
if(PYTHON_ROOT)
    set(Python_ROOT_DIR "${PYTHON_ROOT}")
    set(Python_FIND_STRATEGY LOCATION)
endif()
find_package(Python 3.8 COMPONENTS Interpreter Development REQUIRED)
message("**** Targeting Python ${Python_VERSION_MAJOR}.${Python_VERSION_MINOR}.${Python_VERSION_PATCH} at ${Python_EXECUTABLE}")
message("**** Python_Development_FOUND=${Python_Development_FOUND}")
message("**** Python_INCLUDE_DIRS=${Python_INCLUDE_DIRS}")
message("**** Python_LIBRARIES=${Python_LIBRARIES}")
message("**** Python_EXECUTABLE=${Python_EXECUTABLE}")
message("**** Python_LINK_OPTIONS=${Python_LINK_OPTIONS}")
message("**** Python_RUNTIME_LIBRARY_DIRS=${Python_RUNTIME_LIBRARY_DIRS}")
message("**** Python_SITELIB=${Python_SITELIB}")
if (NOT Python_Development_FOUND OR NOT Python_LIBRARIES OR NOT Python_EXECUTABLE OR NOT Python_INCLUDE_DIRS OR NOT Python_SITELIB)
    message(FATAL_ERROR "Necessary Python headers and/or lib not found")
endif()
include_directories(${Python_INCLUDE_DIR})


# Build library as a Python module. (Using Boost.Python)
add_library(bofh_model MODULE
    src/bofh/model/bofh_common.hpp
    src/bofh/model/bofh_entity_idx.hpp
    src/bofh/model/bofh_entity_idx_fwd.hpp
    src/bofh/model/bofh_model.cpp
    src/bofh/model/bofh_model.hpp
    src/bofh/model/bofh_model_fwd.hpp
    src/bofh/model/bofh_model_py_ext.cpp
    )
target_include_directories(bofh_model PUBLIC model)
target_link_libraries(bofh_model ${Boost_LIBRARIES})
target_include_directories(bofh_model PRIVATE ${Python_INCLUDE_DIRS})
set_target_properties(bofh_model PROPERTIES PREFIX "") # build library without "lib{x}" name
install(TARGETS bofh_model DESTINATION ${Python_SITELIB})





enable_testing()

#function(create_test test_name)
#    add_executable(${test_name} ${ARGN})
#    target_link_libraries(${test_name} test_utils)
#    add_test(${test_name} ${test_name})
#endfunction()

